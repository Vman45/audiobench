DATA_TYPE SAMPLE = strength[0?]:TYPE + offset[0?]:TYPE + Waveform(0, 0.0):TYPE;
[BUFFER_LENGTH]SAMPLE audio = 0.0;

macro ApplyStrength(sample, buffer_pos):(adjusted) {
    AUTO adjusted;
    if STRENGTH_MODE == 0 { // Max
        adjusted = sample * strength[buffer_pos?] + (1.0 - strength[buffer_pos?]);
    } else if STRENGTH_MODE == 1 { // Mid
        adjusted = sample * strength[buffer_pos?];
    } else if STRENGTH_MODE == 2 { // Min
        adjusted = sample * strength[buffer_pos?] - (1.0 - strength[buffer_pos?]);
    }
}

AUTO timing = GetTiming(TIME_SOURCE, TIME_TYPE);
assert timing:TYPE == [BUFFER_LENGTH]FLOAT;
for i = 0 to BUFFER_LENGTH no_unroll {
    AUTO sample = Waveform(i, (timing[i] / CYCLE_TIME + offset[i?] + 1.0) % 1.0);
    audio[i] = ApplyStrength(sample, i);
}

if global_update_feedback_data {
    FLOAT base = offset[0?][0?];
    macro OffsetWaveform(buffer_pos, phase):(value) {
        AUTO value = ApplyStrength(Waveform(buffer_pos, (phase + base + 1.0) % 1.0), 0);
    }
    FLOAT cursor_phase = (timing[0] / CYCLE_TIME) % 1.0;
    DisplayWaveformWithCursor(SetGraphFeedback, OffsetWaveform, cursor_phase);
}
