[BUFFER_LENGTH]FLOAT signal;

static start, releasing, last_value {
    FLOAT start = 0.0;
    BOOL releasing = FALSE;
    FLOAT last_value = 0.0;
}

AUTO timing = GetTiming(TIMING_MODE);
assert timing:TYPE == [BUFFER_LENGTH]FLOAT;
for i = 0 to BUFFER_LENGTH no_unroll {
    if !releasing {
        if reset_trigger[i?] {
            start = timing[i];
        }
        if release_trigger[i?] {
            start = timing[i];
            releasing = TRUE;
        }
    }

    FLOAT now = timing[i] - start;
    FLOAT value;
    if releasing {
        if now < RELEASE_TIME {
            value = last_value * (1.0 - now / RELEASE_TIME);
        } else {
            value = 0.0;
        }
    } else {
        if now < ATTACK_TIME {
            value = now / ATTACK_TIME;
        } else {
            now = now - ATTACK_TIME;
            if now < DECAY_TIME {
                value = 1.0 - now / DECAY_TIME * (1.0 - sustain[i?][0?]);
            } else {
                value = sustain[i?][0?];
            }
        }
        last_value = value;
    }

    signal[i] = value * 2.0 - 1.0;
}

if global_update_feedback_data {
    FLOAT now_time = timing[0] - start;
    if releasing {
        now_time = now_time + ATTACK_TIME + DECAY_TIME;
        if now_time > ATTACK_TIME + DECAY_TIME + RELEASE_TIME {
            now_time = ATTACK_TIME + DECAY_TIME + RELEASE_TIME;
        }
    } else if now_time > ATTACK_TIME + DECAY_TIME {
        now_time = ATTACK_TIME + DECAY_TIME;
    }
    FLOAT multiplier = 1.0;
    if TimingModeIsBeatSynchronized(TIMING_MODE) {
        multiplier = 60.0 / global_bpm;
    }
    SetGraphFeedback([
        ATTACK_TIME * multiplier,
        DECAY_TIME * multiplier,
        sustain[0?][0?],
        RELEASE_TIME * multiplier,
        now_time * multiplier,
        signal[0][0?],
    ]);
}
