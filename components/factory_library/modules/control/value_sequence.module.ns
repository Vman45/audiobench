[BUFFER_LENGTH]FLOAT out_value;

static base_time {
    FLOAT base_time = 0.0;
}

INT NUM_STEPS = (SEQUENCE:DIMS)[0];
assert SEQUENCE:TYPE == [NUM_STEPS]FLOAT;
AUTO timing = GetTiming(TIMING_MODE);
assert timing:TYPE == [BUFFER_LENGTH]FLOAT;

if global_update_feedback_data {
    FLOAT playhead_pos = ((timing[0] - base_time) / STEP_TIME) % Itof(NUM_STEPS);
    DisplayValueSequenceData(SetPlayheadFeedback, playhead_pos, ramping[0?][0?]);
}

for i = 0 to BUFFER_LENGTH no_unroll {
    if reset[i?] {
        base_time = timing[i];
    }
    FLOAT step_now = ((timing[i] - base_time) / STEP_TIME) % Itof(NUM_STEPS);
    INT step_index = Ftoi(step_now);
    FLOAT step_progress = step_now % 1.0;
    FLOAT ramp_start = (1.0 - ramping[i?][0?]);
    if step_progress <= ramp_start {
        out_value[i] = SEQUENCE[step_index];
    } else {
        INT next_index = (step_index + 1) % NUM_STEPS;
        FLOAT ramp_amount = (step_progress - ramp_start) / ramping[i?][0?];
        out_value[i] = 
            SEQUENCE[step_index] * (1.0 - ramp_amount) 
            + SEQUENCE[next_index] * ramp_amount;
    }
}
